Título: Exercício de Busca - UCS
Topicos do problema: grafo; busca; 
Descrição: <p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">Este exercício requer os conhecimentos de Busca de Custo Uniforme (UCS) vistos em sala. </p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">É liberado uso de implementação de fila de prioridade do Python.</p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">A primeira linha da entrada é o nó inicial.</p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">A segunda linha da entrada é o nó final.</p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">O resto da entrada consiste num grafo representado da seguinte forma:</p><pre style="color: rgb(147, 149, 152);background-color: rgb(245, 245, 245);">X Y D</pre><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">tal que: X e Y são nós representados por caracteres (char) e D é uma distância em número inteiro não-negativo (int). </p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">Note que este<span> </span><b>grafo é direcionado. (ou seja, se A S está no input, então S A não estará necessariamente também).</b></p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">A entrada termina com uma linha em branco. </p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);"><br/></p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">Para fins práticos,<b><span> </span>o código que interpreta o input (em Python) está neste pastebin, bastando você programar o DFS:</b></p><pre style="color: rgb(147, 149, 152);background-color: rgb(245, 245, 245);">https://pastebin.com/V7c8fhxz<br/></pre><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);"><br/></p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">A saída deve ser impressa no formato: [estado da fila de prioridade] por linha (na ordem que cada nó foi visitado)</p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);"><b>imprima a fila de prioridade completa a cada linha (ordenada alfabeticamente, basta usar uma função sort(key = lambda x: x[1]) a cada alteração que houver nela.</b></p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">Na última linha o percurso feito deverá ser impresso na ordem de visita.</p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">[(0, 'S')]</p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">....</p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">[(1,'B'), (2,'C'), (3,'D'), (0, 'S')]</p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">[(2,'C'), (3,'D'), (0, 'S')]</p><p style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">['S', 'B', 'C', 'D']</p>
Formato da entrada: <p>S</p><p>G</p><p>S A <span>3</span></p><p><span>S B 6</span></p><p><span>S C 2</span></p><p><span>A D 3</span></p><p><span>B D 4</span></p><p><span>B G 9</span></p><p><span>C E 1</span></p><p><span>D F 5</span></p><p><span>E B 2</span></p><p><span>E F 6</span></p><p><span>F G 5</span></p><p><span>H G 8</span></p><p><span><br/></span></p>
Formato da saída: <p></p>[(0, 'S')]<div>[(3, 'A'), (6, 'B'), (2, 'C'), (0, 'S')]</div><div>[(3, 'A'), (6, 'B'), (2, 'C'), (3, 'E'), (0, 'S')]</div><div>[(3, 'A'), (5, 'B'), (2, 'C'), (3, 'E'), (9, 'F'), (0, 'S')]</div><div>[(3, 'A'), (5, 'B'), (2, 'C'), (6, 'D'), (3, 'E'), (9, 'F'), (0, 'S')]</div><div>[(3, 'A'), (5, 'B'), (2, 'C'), (6, 'D'), (3, 'E'), (9, 'F'), (14, 'G'), (0, 'S')]</div><div>['S', 'C', 'E', 'B', 'G']<p></p></div>
