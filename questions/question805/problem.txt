Título: Busca em Largura
Topicos do problema: 
Descrição: <p>O algoritmo de busca em largura é bastante utilizado em estruturas de dados, e costuma ser útil para descobrir o menor caminho entre dois pontos. O algoritmo é iniciado a partir de um vértice arbitrário de um grafo e explora primeiro os seus vizinhos (vértices adjacentes) para então seguir para os vizinhos dos vizinhos.</p><p>Para cada iteração do algoritmo, a partir do vértice inicial, marcamos em cada vértice visitado:</p><ol><li> a distância a partir da origem em número de arestas percorridas;</li><li>o vértice predecessor, o que permite realizarmos o backtracking a partir de um nó de destino, até a origem, assumindo que a busca foi realizada e há um caminho entre os dois vértices.</li></ol><p>Neste exercício você receberá um grafo como entrada e alguns casos de teste consistindo de um nó de origem e de destino, para informar se há um caminho entre os dois nós e qual seria este caminho.</p>
Formato da entrada: <p>A primeira linha da entrada consiste dos valores &#34;<b>V</b><span><b> A T</b>&#34;, onde <b>V</b> é a quantidade de vértices do grafo, <b>A</b> corresponde à quantidade de arestas presentes no grafo, e <b>T</b> é a quantidade de casos de teste a serem examinados.</span></p><p><span>Após a primeira linha, existem <b>A</b> linhas detalhando todas as arestas do grafo no formato &#34;<b>O</b> <b>D</b>&#34;, onde <b>O </b>é o vértice de origem da aresta e <b>D</b> o vértice de destino. Perceba que embora sejam <b>V</b> vértices, as chaves de cada vértice vão de <b>0</b> a <b>V-1</b>.</span></p><p><span>Após as linhas das arestas, existem <b>T</b> linhas detalhando os casos de teste também no formato &#34;<b style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">O</b><b style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">D</b>&#34;, onde <b style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">O </b>é o vértice de origem da busca em largura e <b style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">D</b> o vértice de destino, onde testaremos se há um caminho de <b>O</b> a <b>D</b>.</span></p><p>Não é obrigatório utilizar uma representação específica de grafo, porém vértices adjacentes são sempre visitados em ordem crescente. Ou seja, se um dado vértice 10 tem como vértices adjacentes 15, 9, e 12, a ordem de visitação será 9, 12, e 15.</p>
Formato da saída: <p>Para cada caso de teste, deve ser impressa inicialmente a linha &#34;Caso de Teste #<i><b>n</b></i> - BFS(<b><i>o</i></b>)&#34;, onde <i><b>n</b></i> é o valor do n-ésimo caso de teste (iniciado em 1 originalmente) e <i><b>o</b></i> corresponde ao vértice de origem. </p><p>Para cada passo da busca em largura, deve ser impressa, em uma linha distinta, a mensagem &#34;Iniciando busca em largura a partir de <b><i>v</i></b>&#34;, onde <b><i>v</i></b> é o vértice em questão sendo examinado.</p><p>Ao final da execução da busca, deve ser impresso, para cada vértice do grafo, uma linha no seguinte formato: &#34;<b>K</b> | <b>D</b> | <b>P</b>&#34;, onde <b>K</b> é a chave do nó do grafo (que vai de <b>0</b> a <b>V-1</b>, como detalhado na entrada), <b>D</b> é a distância do nó em relação ao vértice de origem para o caso de teste (se não for alcançável, deve ser impresso &#34;<b>-</b>&#34;), e <b>P</b> é o vértice predecessor do nó (se não aplicável, também imprimir &#34;<b>-</b>&#34;).</p><p>Finalmente, deve ser impressa em uma linha uma mensagem informando se há caminho entre <b>O</b> e <b>D</b>, onde <b>O</b> é o vértice de origem da busca em largura e <b style="color: rgb(147, 149, 152);background-color: rgb(255, 255, 255);">D</b> o vértice de destino, para o caso de teste em questão. Para o valor desta mensagem há duas possibilidades:</p><ol><li>Se não há caminho entre <b>O</b> e <b>D</b>, imprima &#34;Sem caminho entre <b>O</b> e <b>D</b>&#34;</li><li><span>Se existe caminho entre <b>O</b> e <b>D</b>, imprima &#34;Caminho entre</span> <b>O</b> <span>e</span> <b>D</b><span>: <b>O</b> =&gt; <b>V1</b> =&gt; <b>V2</b> =&gt; ... =&gt; <b>Vn</b> =&gt; <b>D</b></span><span>&#34;, onde será detalhado o menor caminho existente entre <b>O</b> e <b>D</b>, identificado pela busca em largura.</span></li></ol><p>Observe a quantidade de quebras de linhas entre as informações impressas e os delimitadores entre os casos de teste, para gerar a saída no formato esperado pelo Huxley.</p>
