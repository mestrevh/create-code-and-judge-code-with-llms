Título: Decifrando senhas
Topicos do problema: caractere; array bidimensional; string; ordenação; 
Tempo limite de execução: 1 segundo(s)
Descrição: <p>Um novo sistema de alta segurança foi criado no CIn para armazenar dados. Esse sistema usa de senhas complexas e criptografia de ponta, e é considerado &#34;impenetrável&#34;. Mas você, que não nega um desafio, se viu na necessidade de quebrar essa barreira e invadir o sistema. </p><p>Depois de várias tentativas sem sucesso, você conseguiu descobrir um fluxo de bits transmitidos toda vez que alguém com acesso entrava no sistema. Além disso, você percebeu que <b>os bits representam os algarismos de 0 a 9</b> e vêm acompanhados de algumas <b>&#34;palavras-chave&#34;</b>, que tornavam a senha mais complexa.</p><p>Você deve desenvolver um programa que <b>converta a sequência de bits em números</b>, os quais serão <b>combinados com as &#34;palavras-chave&#34;</b> para formar as senhas necessárias para acessar o sistema. Além disso, existe um <b>código de entrada</b> que também deve ser decifrado. Esse código é o resultado da <b>soma de todos os números que foram convertidos da sequência de bits. </b></p><p><b>Observações:</b></p><p></p><ul><li><b>cada número na sequência de bits é composto por 4 bits seguidos. (Ex: na sequência 100101110101, os números são 1001 = 9, 0111 = 7, 0101 = 5. Logo a sequência é 975.</b></li><li><b>as senhas devem ser organizadas em ordem alfabética, de acordo com as palavras-chave.</b></li><li><b>as senhas são formadas pela combinação das palavras-chave com a sequência de números. (Ex: palavras = Zebra, Gato, Cachorro; sequência = 975. Logo, as senhas serão: Cachorro975; Gato975; Zebra975.</b></li><li><b>Dica: utilize 100 como tamanho máximo das strings.<br/>                                                                                  </b><span><img src="https://www.thehuxley.com/api/v1/problems/image/dd34521752a5b6228af23a98fc554c8aec0f8fb7p.jpeg"/>                    </span><span>  </span></li></ul><p></p><p></p>
Formato da entrada: <p>A entrada é composta por um inteiro <b>(n)</b>, que representa quantas palavras-chave serão usadas. Nas n linhas seguintes, as <b>n palavras-chave(strings)</b>.<br/>Por fim, uma string (com tamanho máximo de 100 caracteres), que representa a sequência de bits.</p><p><br/></p><h3 style="color: rgb(0, 0, 0);background-color: rgb(255, 255, 255);"><b>n</b></h3><h3 style="color: rgb(0, 0, 0);background-color: rgb(255, 255, 255);"><b>p1 p2 ... pn</b></h3><div><h3 style="color: rgb(0, 0, 0);background-color: rgb(255, 255, 255);"><b>str</b></h3></div>
Formato da saída: <p>A saída terá o seguinte formato:</p><p>o codigo de entrada eh: %(valor do codigo de entrada)</p><p>&#34;palavra-chave1+senha&#34; (duas strings juntas)</p><p>&#34;palavra-chave2+senha&#34;</p><p>...</p><p>&#34;palavra-chaveN+senha&#34;</p><p><br/></p><p><b style="color: rgb(0, 0, 0);background-color: rgb(255, 255, 255);">OBS:<span> </span></b></p><p></p><ul><li><b style="color: rgb(0, 0, 0);background-color: rgb(255, 255, 255);">Em todos os casos deve ser impresso uma quebra de linha após a frase. </b></li><li><b style="color: rgb(0, 0, 0);background-color: rgb(255, 255, 255);">C</b><b style="color: rgb(0, 0, 0);">aso um grupo de 4 bits na sequência de bits represente um número maior que 9, imprima a frase &#34;Numero invalido!&#34; imediatamente após esse número ser detectado e continue analisando a sequência em busca de outros números(mas esse número inválido ainda constará na soma que representará o código de entrada).</b></li><li><b style="color: rgb(0, 0, 0);">Caso não tenha nenhuma palavra-chave (n = 0), imprima apenas o código de entrada.</b></li><li><b style="color: rgb(0, 0, 0);">Caso a string de bits seja vazia, imprima a frase &#34;Sem bits no momento...&#34; e <u>pare</u> a execução do programa.</b></li></ul><p></p>
