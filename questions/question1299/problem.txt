Título: Escalonador
Topicos do problema: heap; 
Descrição: <p style="color: rgb(36, 41, 46);">Uma das funções do sistema operacional de um computador é gerir a execução simultânea de vários processos, alocando tempo de CPU de acordo com a prioridade da tarefa, ao mesmo tempo em que tenta evitar que um processo de baixa prioridade fique indefinidamente à espera. Considere o seguinte esquema de escalonamento de processos implementado por um sistema operacional experimental para máquinas com <code style="background-color: rgba(27, 31, 35, 0.05);">N</code> CPUs (numeradas de <code style="background-color: rgba(27, 31, 35, 0.05);">0</code> a <code style="background-color: rgba(27, 31, 35, 0.05);">N-1</code>).</p><ul style="color: rgb(36, 41, 46);"><li><p>Cada novo processo recebe um identificador único <code style="background-color: rgba(27, 31, 35, 0.05);">I=0,1,2,…</code> e uma prioridade <code style="background-color: rgba(27, 31, 35, 0.05);">P</code> de <code style="background-color: rgba(27, 31, 35, 0.05);">0</code> a <code style="background-color: rgba(27, 31, 35, 0.05);">9</code>, sendo <code style="background-color: rgba(27, 31, 35, 0.05);">0</code> a maior prioridade, e <code style="background-color: rgba(27, 31, 35, 0.05);">9</code> a menor prioridade.</p></li><li><p>Os processos são todos colocados numa fila única, de acordo com sua prioridade, onde aguardam disponibilidade de CPU para serem executados.</p></li><li><p>Assim que o SO detecta que há alguma CPU ociosa, o processo de maior prioridade é imediatamente retirado da fila e é posto em em execução na CPU <code style="background-color: rgba(27, 31, 35, 0.05);">C</code> <em>de menor número</em> disponível por uma <em>rodada</em> correspondente a um intervalo de tempo limitado de <code style="background-color: rgba(27, 31, 35, 0.05);">T=20-P</code>ms, onde <code style="background-color: rgba(27, 31, 35, 0.05);">P</code> é a prioridade do processo atendido.</p></li><li><p>Passado esse intervalo de <code style="background-color: rgba(27, 31, 35, 0.05);">T</code>ms, o SO volta a avaliar a situação da CPU <code style="background-color: rgba(27, 31, 35, 0.05);">C</code>. Se a CPU estiver ociosa, então o processo encerrou a execução. Se a CPU estiver ocupada, então é porque o processo ainda está em execução. Nesse caso, o processo é interrompido no ponto em que se encontra e re-inserido na fila para aguardar por mais um intervalo de CPU disponível, porém com prioridade <code style="background-color: rgba(27, 31, 35, 0.05);">P+1</code> (limitada a 9), onde <code style="background-color: rgba(27, 31, 35, 0.05);">P</code> é a sua prioridade atual. Em ambos os casos, a CPU <code style="background-color: rgba(27, 31, 35, 0.05);">C</code> fica imediatamente disponível para atender o próximo processo da fila (que pode, inclusive, ser novamente o mesmo processo)</p></li></ul><p style="color: rgb(36, 41, 46);">Sua tarefa é avaliar o desempenho desse esquema de escalonamento através de um simulador.</p>
Formato da entrada: <p style="color: rgb(36, 41, 46);"></p><p style="color: rgb(36, 41, 46);">A primeira linha da entrada contém um número</p><p style="color: rgb(36, 41, 46);"><code style="background-color: rgba(27, 31, 35, 0.05);">N</code></p><p style="color: rgb(36, 41, 46);">correspondente ao número de CPUs disponíveis (<code style="background-color: rgba(27, 31, 35, 0.05);">0&lt;N&lt;100</code>).</p><p style="color: rgb(36, 41, 46);">Seguem-se várias linhas, correspondentes a eventos na ordem cronológica correta, porém não necessariamente igualmente espaçados. Esses eventos podem ser de dois tipos:</p><ol style="color: rgb(36, 41, 46);"><li><p><code style="background-color: rgba(27, 31, 35, 0.05);">NEW I P</code>: Indica que um<span class="Apple-converted-space"> </span><strong>novo</strong><span class="Apple-converted-space"> </span>processo com identificador<span class="Apple-converted-space"> </span><code style="background-color: rgba(27, 31, 35, 0.05);">I</code><span class="Apple-converted-space"> </span>e prioridade<span class="Apple-converted-space"> </span><code style="background-color: rgba(27, 31, 35, 0.05);">P</code><span class="Apple-converted-space"> </span>foi adicionado à fila de execução.</p></li><li><p><code style="background-color: rgba(27, 31, 35, 0.05);">STA C S</code>: Indica que o último intervalo de tempo alocado para a execução de um processo na CPU<span class="Apple-converted-space"> </span><code style="background-color: rgba(27, 31, 35, 0.05);">C</code><span class="Apple-converted-space"> </span>terminou, e o status da CPU nesse instante é<span class="Apple-converted-space"> </span><code style="background-color: rgba(27, 31, 35, 0.05);">S</code>, onde<span class="Apple-converted-space"> </span><code style="background-color: rgba(27, 31, 35, 0.05);">S</code><span class="Apple-converted-space"> </span>é um código de um caractere que pode ser<span class="Apple-converted-space"> </span><code style="background-color: rgba(27, 31, 35, 0.05);">'A'</code><span class="Apple-converted-space"> </span>(ativa=processo ainda em execução), ou<span class="Apple-converted-space"> </span><code style="background-color: rgba(27, 31, 35, 0.05);">'O'</code>(ociosa=processo encerrado).</p></li></ol><p style="color: rgb(36, 41, 46);">O final da simulação é indicado por uma linha</p><p style="color: rgb(36, 41, 46);"><code style="background-color: rgba(27, 31, 35, 0.05);">END</code></p><h3 id="observa-es" style="color: rgb(36, 41, 46);"><a class="anchor" href="#observa-es" style="background-color: transparent;color: rgb(3, 102, 214);float: left;"><span class="octicon octicon-link" style="color: rgb(27, 31, 35);"></span></a>Observações</h3><ul style="color: rgb(36, 41, 46);"><li>Inicialmente, as CPUs estão todas disponíveis. </li><li>Caso dois processos tenham a mesma prioridade, o processo mais antigo (isto é, o de menor número) é atendido primeiro.</li><li>Considera-se que os eventos do tipo<span class="Apple-converted-space"> </span><code style="background-color: rgba(27, 31, 35, 0.05);">NEW</code><span class="Apple-converted-space"> </span>e<span class="Apple-converted-space"> </span><code style="background-color: rgba(27, 31, 35, 0.05);">STA</code><span class="Apple-converted-space"> </span>são processados instantaneamente pelo SO, não tendo qualquer impacto sobre o tempo de execução. Em particular, assim que um processo é (re-)enfileirado, ele passa imediatamente a disputar CPU com os demais processos na fila. </li><li>Todos os eventos são válidos e estão em ordem cronológica, não podendo assim uma CPU sem processos ter um evento<span class="Apple-converted-space"> </span><code style="background-color: rgba(27, 31, 35, 0.05);">STA</code>. </li></ul><h3 id="exemplo" style="color: rgb(36, 41, 46);"><a class="anchor" href="#exemplo" style="background-color: transparent;color: rgb(3, 102, 214);float: left;"><span class="octicon octicon-link" style="color: rgb(27, 31, 35);"></span></a>Exemplo</h3><p style="color: rgb(36, 41, 46);">Supondo um caso com duas CPUs, poderíamos ter:</p><ol style="color: rgb(36, 41, 46);"><li><code style="background-color: rgba(27, 31, 35, 0.05);">NEW 0 5</code><span class="Apple-converted-space"> </span>--&gt; Um novo processo de prioridade 5 é enfileirado e começa imediatemente a execução por 15ms na CPU 0.</li><li><code style="background-color: rgba(27, 31, 35, 0.05);">NEW 1 9</code><span class="Apple-converted-space"> </span>--&gt; Um novo processo de prioridade 9 é enfileirado e começa imediatamente a execução por 11ms na CPU 1.</li><li><code style="background-color: rgba(27, 31, 35, 0.05);">STA 1 A</code><span class="Apple-converted-space"> </span>--&gt; Passado 11ms desde o evento 2, o processo 1 ainda não acabou e é re-enfileirado com a mesma prioridade 9, recomeçando imediatamente a executar na CPU 1 por mais 11ms.</li><li><code style="background-color: rgba(27, 31, 35, 0.05);">NEW 2 1</code><span class="Apple-converted-space"> </span>--&gt; Um novo processo de prioridade 1 é enfileirado e aguarda disponibilidade de CPU.</li><li><code style="background-color: rgba(27, 31, 35, 0.05);">STA 0 A</code><span class="Apple-converted-space"> </span>--&gt; Passados 15ms desde o evento 1, o processo 0 ainda não acabou e é re-enfileirado com prioridade 6; A CPU 0 é alocada por 19ms para o processo 2 que aguardava na fila com maior prioridade.</li><li><code style="background-color: rgba(27, 31, 35, 0.05);">STA 1 O</code><span class="Apple-converted-space"> </span>--&gt; Passados 11ms desde o evento 3, o processo 1 encerrou a execução; A CPU 1 passa imediatamente a executar o processo 0 por mais 14ms.</li><li><code style="background-color: rgba(27, 31, 35, 0.05);">STA 0 O</code><span class="Apple-converted-space"> </span>--&gt; Passados 19ms desde o evento 5, o processo 2 encerrou a execução; A CPU 0 fica ociosa, pois não há mais processos na fila do escalonador.</li><li><code style="background-color: rgba(27, 31, 35, 0.05);">STA 1 A</code><span class="Apple-converted-space"> </span>--&gt; Passados 14ms desde o evento 6, o processo 0 ainda não acabou e é re-enfileirado com prioridade 7; A CPU 0 passa imediatamente a executar o processo 0 por mais 13ms, e a CPU 1 fica ociosa, pois não há mais processos na fila do escalonador.</li><li><code style="background-color: rgba(27, 31, 35, 0.05);">STA 0 O</code><span class="Apple-converted-space"> </span>--&gt; Passados 13ms desde o evento 8, o processo 0 encerrou a execução; A CPU 0 fica ociosa, pois não há mais processos na fila do escalonador.</li></ol>
Formato da saída: <p style="color: rgb(36, 41, 46);">Ao final da simulação, deve ser impresso um resumo dos resultados na forma:</p><pre style="background-color: rgb(246, 248, 250);color: rgb(36, 41, 46);"><code>STATS BY PRIORITY&#10;&#10;0: N[0] T[0] R[0]&#10;1: N[1] T[1] R[1]&#10;2: N[2] T[2] R[2]&#10;...&#10;8: N[8] T[8] R[8]&#10;9: N[9] T[9] R[9]&#10;&#10;STATS BY CPU&#10;&#10;0: U[0]&#10;1: U[1]&#10;...&#10;N-1: U[N-1]&#10;</code></pre><p style="color: rgb(36, 41, 46);">onde</p><ul style="color: rgb(36, 41, 46);"><li><code style="background-color: rgba(27, 31, 35, 0.05);">N[P]</code> indica o número total de processos cujas prioridades <span>originais</span> eram <code style="background-color: rgba(27, 31, 35, 0.05);">P</code>.</li><li><code style="background-color: rgba(27, 31, 35, 0.05);">T[P]</code> indica o tempo total gasto em processos cujas prioridades <span>originais</span> eram <code style="background-color: rgba(27, 31, 35, 0.05);">P</code>.</li><li><code style="background-color: rgba(27, 31, 35, 0.05);">R[P]</code> indica a quantidade total de <em>rodadas</em> de execução para processos cujas prioridades <span>originais</span> eram <code style="background-color: rgba(27, 31, 35, 0.05);">P</code>. Cada vez que o SO retira um processo da fila e aloca um intervalo de tempo numa CPU, é contada uma rodada.</li><li><code style="background-color: rgba(27, 31, 35, 0.05);">U[C]</code> indica o tempo total de processamento realizado pela CPU <code style="background-color: rgba(27, 31, 35, 0.05);">C</code>.</li></ul><h3 id="exemplo" style="color: rgb(36, 41, 46);"><a class="anchor" href="#exemplo" style="color: rgb(3, 102, 214);float: left;"><span class="octicon octicon-link" style="color: rgb(27, 31, 35);"></span></a>Exemplo</h3><pre style="background-color: rgb(246, 248, 250);color: rgb(36, 41, 46);"><code>STATS BY PRIORITY&#10;&#10;0: 0 0 0&#10;1: 1 19 1&#10;2: 0 0 0&#10;3: 0 0 0&#10;4: 0 0 0&#10;5: 1 42 3&#10;6: 0 0 0&#10;7: 0 0 0&#10;8: 0 0 0&#10;9: 1 22 2&#10;&#10;STATS BY CPU&#10;&#10;0: 47&#10;1: 36</code></pre>
