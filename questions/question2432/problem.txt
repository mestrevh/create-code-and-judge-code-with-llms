Título: Pilha de Recursão
Topicos do problema: estrutura de dados; 
Tempo limite de execução: 1 segundo(s)
Descrição: <b id="docs-internal-guid-a1894fb6-7fff-b356-f509-80d05ef52cd1"></b><p dir="ltr"><span style="color: #000000;background-color: transparent;">Recursão é uma ferramenta extremamente poderosa, e é muito importante que os alunos de Algoritmos entendam como ela funciona.</span><span style="color: #000000;background-color: transparent;"><br/></span><span style="color: #000000;background-color: transparent;">Sempre que um método acaba de ser executado, dizemos que ele &#34;retorna&#34;. </span></p><span style="color: #000000;background-color: transparent;">Quando um método M1 chama outro método M2, M1 entra na pilha de execução do sistema operacional, onde irá esperar que o M2 chame seu &#34;return&#34; para voltar a ser executado. É muito importante que o programador, ao usar recursão, saiba exatamente quando cada método ou cada chamada de método irá retornar. Esse é seu trabalho nessa questão!</span><span style="color: #000000;background-color: transparent;"><br/></span><span style="color: #000000;background-color: transparent;">Descreveremos uma chamada de método que pode ter chamadas a outros métodos em seu interior, e pedimos que o aluno imprima na tela a ordem em que os métodos retornarão.</span><span style="color: #000000;background-color: transparent;"><br/></span><span style="color: #000000;background-color: transparent;"><br/></span><span style="color: #000000;background-color: transparent;">Use objetos para cada elemento dessa pilha. Listas/vetores ou estruturas de dados prontas são proibidas nessa questão.</span>
Formato da entrada: <p><span><span style="color: rgb(0, 0, 0);background-color: transparent;">A entrada começa com um número inteiro N que representa quantos conjuntos de entradas serão inseridos.</span></span></p><p><span id="docs-internal-guid-01165adf-7fff-976b-3147-cbda1cd8abd6"><span style="color: rgb(0, 0, 0);background-color: transparent;">Cada conjunto de entrada possuirá a descrição de um método que poderá ou não invocar outros, ou até mesmo a si próprio. A entrada é formada por várias strings (de no máximo 30 caracteres). As strings podem ser &#34;return&#34;, indicando que o último método da pilha deve ser retornado, ou a string também pode ser algo diferente de &#34;return&#34; para indicar uma chamada de método. Você implementará uma pilha para simular as recursões. Use objetos para cada elemento dessa pilha. Listas/vetores ou estruturas de dados prontas são proibidas nessa questão. Quando um return deixar a pilha vazia, você saberá que o conjunto acabou. As strings estão espaçadas por um número arbitrário de espaços em brancos e quebras de linha.</span></span></p>
Formato da saída: <p><span id="docs-internal-guid-f75763da-7fff-b1fd-8354-586b1afb28b6"><span style="color: rgb(0, 0, 0);background-color: transparent;">A saída deve conter os nomes dos métodos na ordem em que são &#34;retornados&#34;. Cada saída deve iniciar com &#34;Conjunto #X&#34;, onde X será 1, 2, 3, ..., e deve ser impressa uma linha em branco ao final de cada conjunto.</span></span><br/></p>
