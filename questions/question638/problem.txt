Título: O problema da parada
Topicos do problema: maratona; 
Descrição: <p>O Problema da Parada (The Halting Problem) é um problema de decisão clássico da Ciência da Computação que consiste, basicamente, em determinar se um dado programa sempre vai parar (ou seja, terminar sua execução) para uma dada entrada arbitrária ou se vai executar infinitamente. Alan Turing provou, em 1936, que é impossível resolver o problema da parada generalizando para qualquer par programa-entrada. Neste problema, porém, dada a descrição de uma linguagem simples, um programa escrito nessa linguagem e uma entrada para esse programa, você deve determinar se o programa dado pára com a entrada dada e, em caso positivo, qual a saída produzida.</p><p>Esta linguagem só trabalha com números inteiros de 0 a 999 (inclusive). Sendo assim, o sucessor de 999 é 0, e o antecessor de 0 é 999. Além disso, ela possui dez variáveis (R0 a R9), sendo que a R0 sempre é atribuído o valor de chamada do programa (ou seja, o parâmetro de entrada) e a R9 é sempre atribuído o valor de saída (o retorno). No início da execução do programa, é atribuído o valor 0 a todas as variáveis, com exceção de R0 que recebe o parâmetro de entrada.</p><p>As operações básicas são atribuição (MOV), soma (ADD), subtração (SUB), multiplicação (MUL), divisão inteira (DIV) e resto da divisão inteira (MOD). Todas essas operações têm a sintaxe COMANDO OPERANDO1,OPERANDO2 (sem espaços entre a vírgula e os operandos), onde COMANDO é uma dessas operações, OPERANDO1 é uma das 10 variáveis (R0 a R9) e OPERANDO2 pode ser uma das 10 variáveis ou um valor inteiro (entre 0 e 999). Todas as operações modificam o valor de OPERANDO1, sendo assim MOV R4,100 é o equivalente a atribuir o valor 100 a R4, enquanto que MUL R3,R8 é o equivalente a multiplicar R3 por R8 e atribuir o resultado a R3. A operação DIV, assim como a MOD, retornam 0 (zero) se OPERANDO2 for 0 ou se a variável equivalente tiver valor 0. Ou seja, DIV R4,0 é o equivalente a MOV R4,0. Por divisão inteira, entendemos a parte inteira do quociente da divisão (sem a parte fracionária). Por exemplo, a divisão inteira de 7 por 2 é 3 (sendo o resto 1).</p><p>Existem seis comandos de fluxo de decisão: IFEQ (se igual), IFNEQ (se diferente), IFG (se maior), IFL (se menor), IFGE (se maior ou igual) e IFLE (se menor ou igual). A sintaxe de todos eles é COMANDO OPERANDO1,OPERANDO2 (sem espaços entre a vírgula e os operandos), onde OPERANDO1 e OPERANDO2 podem ser variáveis (R0 a R9) ou valores inteiros (entre 0 e 999). Assim, o comando IFEQ R4,123 é o equivalente a testar se R4 é igual a 123. Caso a condição testada seja verdadeira, o programa continua a executar normalmente a linha subseqüente ao comando de decisão. Caso a condição seja falsa, o programa passa a executar a linha subseqüente ao ENDIF mais próximo. Todos os comandos de decisão devem ter um comando ENDIF correspondente.</p><p>Finalmente, existem os comandos CALL e RET, ambos com a sintaxe COMANDO OPERANDO, onde OPERANDO é uma variável (R0..R9) ou valor direto (entre 0 e 999). O comando CALL chama o próprio programa novamente, passando OPERANDO como parâmetro de entrada, ou seja, atribuindo o valor de OPERANDO à variavel R0. Já RET termina a execução do programa, retornando o valor de OPERANDO como o resultado de saída. A ultima linha do programa sempre será um comando RET. Observe que, caso o programa chame a si mesmo através do comando CALL, quando a execução voltar, o valor de R9 vai estar alterado com o valor retornado pelo programa. Note também que todas as variáveis (R0..R9) são locais, ou seja, uma chamada subseqüente ao programa não pode alterar os valores guardados nas variáveis da instância anterior, com exceção, naturalmente, do valor de R9 que recebe o retorno da instância chamada.</p><p>O exemplo a seguir ilustra um programa que calcula o fatorial de um número.</p><p> </p><pre>linha  comando<br/>  1   IFEQ R0,0<br/>  2      RET 1<br/>  3      ENDIF<br/>  4   MOV R1,R0<br/>  5   SUB R1,1<br/>  6    CALL R1<br/>  7   MOV R2,R9<br/>  8   MUL R2,R0<br/>  9     RET R2</pre><p>1a linha: Verifica se o valor de R0 vale 0, caso positivo, executa a próxima linha, caso contrário, pula para a 4a linha (ENDIF mais próximo).<br/> 2a linha: Retorna 1 como saída do programa.<br/> 3a linha: Marca o fim do bloco de decisão iniciado na primeira linha.<br/> 4a linha: Atribui o valor de R0 a R1 (R1 ← R0).<br/> 5a linha: Diminui 1 de R1 (R1 ← R1 - 1).<br/> 6a linha: Chama o programa passando R1 como parâmetro de entrada.<br/> 7a linha: Guarda o valor de R9 (retornado pela chamada anterior) em R2 (R2 ← R9)<br/> 8a linha: Multiplica o valor de R2 por R0 (R2 ← R2 * R0)<br/> 9a linha: Retorna o valor de R2 como saída do programa.</p><p>A tabela seguir traz um resumo dos comandos para referência:</p><p> </p><pre>comando     &#9;sintaxe                  significado<br/>  MOV   &#9;MOV OP1,OP2               OP1 ← OP2<br/>  ADD    &#9;ADD OP1,OP2&#9;          OP1 ← OP1 + OP2<br/>  SUB    &#9;SUB OP1,OP2     &#9;  OP1 ← OP1 - OP2<br/>  MUL    &#9;MUL OP1,OP2            &#9;  OP1 ← OP1 * OP2<br/>  DIV    &#9;DIV OP1,OP2            &#9;  OP1 ← OP1 / OP2<br/>  MOD   &#9;MOD OP1,OP2               OP1 ← OP1 % OP2<br/>  IFEQ  &#9;IFEQ OP1,OP2              if OP1 == OP2<br/>  IFNEQ  &#9;IFNEQ OP1,OP2             if OP1 != OP2<br/>  IFG   &#9;IFG OP1,OP2               if OP1 &gt; OP2<br/>  IFL   &#9;IFL OP1,OP2               if OP1 &lt; OP2<br/>  IFGE  &#9;IFGE OP1,OP2              if OP1 &gt;= OP2<br/>  IFLE  &#9;IFLE OP1,OP2              if OP1 &lt;= OP2<br/>  ENDIF  &#9;ENDIF    &#9;&#9;  Marca fim do bloco de execução condicional<br/>  CALL  &#9;CALL OP   &#9;&#9;  Chama o programa com OP como entrada<br/>  RET   &#9;RET OP                    return OP</pre><h3></h3>
Formato da entrada: <p>A entrada contém vários casos de teste. Cada caso de teste se inicia com dois inteiros, <em>L</em> e <em>N</em>, representando respectivamente o número de linhas do programa (<em>1 ≤ L &lt; 100</em>) e o valor do parâmetro de entrada do programa (<em>0 ≤ N &lt; 1000</em>). As L linhas seguintes contêm o programa. Pode-se assumir que ele está sempre sintaticamente correto de acordo com as regras definidas acima. Todos os comandos (bem como o nome das variáveis) só conterão letras maiúsculas. O final da entrada é marcado pelo caso em que <em>L = N = 0</em> e não deve ser processado.<br/></p>
Formato da saída: <p>Para cada caso de teste, seu programa deve produzir uma linha contendo um inteiro que representa o valor de saída (retorno) para a entrada N dada, ou um asterisco (*) no caso de o programa nunca terminar.<br/></p>
