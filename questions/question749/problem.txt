Título: AVLMap
Topicos do problema: 
Tempo limite de execução: 1 segundo(s)
Descrição: <p>Um índice remissivo de um texto corresponde a uma lista de palavras com a indicação dos locais no texto onde cada uma delas ocorre. Dessa maneira, uma palavra indexada pode ser rapidamente localizada no texto, sem necessidade de uma pesquisa exaustiva.<br/><br/>Um índice remissivo pode ser implementado com o auxílio do tipo abstrato de dados Map, que associa uma chave K a um valor V. No caso do índice remissivo, a chave corresponde à palavra indexada e o valor corresponde à lista das posições no texto onde a palavra ocorre.<br/><br/>Para uma implementação adequada, precisamos que a consulta seja feita de maneira eficiente. Podemos utilizar para tal uma estrutura como uma hash table ou uma árvore de busca binária balanceada. Neste exercício vamos implementar a estrutura AVLMap baseada numa AVL.<br/><br/>No índice baseado na AVLMap, cada nó possui uma chave numérica e um valor associado. Portanto, cada palavra indexada W deve ser primeiramente associada a uma chave numérica hashcode(W). <br/><br/>A função hashcode(W) que converte a palavra W em um código numérico consiste em considerar W como um número escrito em base 26 (tamanho do alfabeto) sendo o 'dígito' a=0, b=1, c=2,.... <br/><br/>hashcode('casa') = c*26^3 + a*26^2 + s*26^1 + a*26^0 = 35620.<br/><br/>O valor associado à palavra W, data(W), consite da própria cadeia W e da lista das linhas do texto no qual a palavra aparece. Assim, teremos o mapeamento:<br/><br/>W ---&gt; [lista das ocorrências de W]<br/><br/>A inclusão de uma nova palavra W no índice corresponde à inclusão do nó <br/><br/>[ hashcode(W) | W | [lista de ocorrências de W] ]<br/><br/>A localização de uma palavra W é feita utilizando-se o par (hashcode(W), W). Ou seja, primeiramente considera-se a chave numérica hashcode(W). Entretanto, como a hashcode não é uma função 1:1, então, caso o hashcode(W) seja igual à chave do nó, ainda será necessário comparar W com a palavra do nó letra a letra. Essa estratégia tem por objetivo evitar que seja necessário comparar lexicograficamente a palavra procurada com cada palavra dos nós no caminho da busca. <br/><br/>Finalmente, para atualizar uma palavra no índice, acrescentando uma nova ocorrência, basta localizar o nó correspondente e apenas acrescentar a nova ocorrência à lista correspondente.<br/><br/></p>
Formato da entrada: <p>A entrada consiste de um texto pré-formatado de maneira simplificada e de uma lista de palavras a serem consultadas no dicionário.<br/><br/>Mais precisamente, a entrada contém uma linha<br/><br/>$TEXTO<br/><br/>seguida por um texto constituído por várias linhas. Por simplicidade, o texto está pré-formatado sendo que as palavras estão 'normalizadas' para o alfabeto 'abcdefghijklmnopqrstuvwxyz' e os sinais de pontuação e caracteres especiais foram sumprimidos.<br/><br/>A seguir, temos uma linha<br/><br/>$CONSULTAS<br/><br/>seguida por uma lista de palavras <br/></p><p>Q0<br/>Q1<br/>Q2<br/>...<br/>QS-1<br/><br/>sendo uma por linha, correspondendo às palavras a serem consultadas.<br/><br/>LIMITES:<br/><br/>- Cada linha do texto possui &lt;= 100 caracteres (incluindo espaços)<br/>- Os hashcodes devem ser limitados a 32 bits (inteiro sem sinal). Portanto, para o  alfabeto de tamanho 26, devemos calculá-los de acordo com a seguinte relação:<br/><br/>hashcode(&#34;&#34;) = 0 // cadeia vazia<br/>hashcode(W=w0...wn) = (26*hashcode(w0...wn-1) + hashcode(wn)) mod 11881376<br/></p>
Formato da saída: <p>Para cada palavra Qj na lista de palavras a serem consultadas, o programa deve<br/>usar a operação Find(Qj) do dicionário para recuperar os números das linhas das ocorrências de Qj no texto e imprimir uma linha<br/><br/>Qj Hj l0 l1 l2 ... ln<br/><br/>onde <br/><br/>- Hj corresponde à profundidade do nó na AVL: a raiz tem profundidade 1, os seus filhos profundidade 2, seus netos profundidade 3 e assim por diante. Caso a palavra não esteja na AVL, consideraremos sua altura como 0 (zero)</p><p>- l0. l1, l2, ..., ln correspondem às linhas nas quais a palavra Qj ocorre no texto em ordem crescente, sem repetição, e separadas por espaço.<br/><br/></p>
