Título: MaxMin
Topicos do problema: grafo; 
Tempo limite de execução: 1 segundo(s)
Descrição: <pre style="overflow-x: auto; overflow-y: hidden; white-space: pre-wrap; word-wrap: break-word; padding: 0px; margin: 0px; font-size: 14px;"><span style="font-family: 'Helvetica Neue', Helvetica, sans-serif, Arial;">Dado um grafo simples conexo G=(V,E) com N vértices rotulados de 0 a N-1, isto é V={0,...,N-1}, definimos a "distância mínima" (ou simplesmente "distância") entre dois vértices A e B,  d(A,B), como o menor comprimento L (número de arestas) de um caminho

P: v[0] - v[1] - ... - v[L]

tal que 

v[0] = A
v[L] = B
(v[I-1],v[I]) pertence a E, para todo I=1,...,L 


Por exemplo, no grafo

</span><span style="font-family: 'courier new', courier;">
0-----1-----5
|\    |     |
| \   |     |
|  2  |     |
|   \ |     |
|    \|     |
3     4     6
</span><span style="font-family: 'Helvetica Neue', Helvetica, sans-serif, Arial;">

temos 

d(0,3) = 1
d(0,4) = 2
d(2,5) = 3
d(3,6) = 4


Ao fixamos um vértice de origem S num grafo conexo, temos

0 &lt;= d(S,X) &lt;= N-1, para todo vértice X em V

ou seja, a distância mínima é limitada inferiormente e superiormente.
Assim sendo, definimos

dmax(G,S) = max{d(S,X) | X em V},

ou seja, dmax(G,S) é a maior distância (mínima) de S a um vértice qualquer de G. Definimos também Nmax(G,S) como sendo o número de vértices de G que estão a essa distância máxima de S.

No exemplo acima, temos 
dmax(G,1)=2, Nmax(G,1)=3
dmax(G,3)=4, Nmax(G,3)=1  

Neste exercício, queremos calcular máximos de distâncias mínimas em grafos conexos.</span></pre>
Formato da entrada: <pre style="font-family: 'Helvetica Neue', Helvetica, sans-serif, Arial; overflow-x: auto; overflow-y: hidden; white-space: pre-wrap; word-wrap: break-word; padding: 0px; margin: 0px; font-size: 14px;">A entrada inicia-se com uma linha contendo um inteiro positivo 

C 

indicando o número de casos. Os casos são numerados de 0 a C-1.

Em seguida, tem-se os diversos casos, cada um correspondendo a um grafo conexo.

Cada caso está na forma:

N S
D[0] E[0,0] E[0,1] ... E[0,D[0]-1]
D[1] E[1,0] E[1,1] ... E[1,D[1]-1]
...
D[N-1] E[N-1,0] E[N-1,1] ... E[N-1,D[N-1]-1]

onde

N = número de vértices do grafo, rotulados de 0 até N-1 (V={0,...,N-1})
S = vértice de origem
D[i] = grau do vértice i, i.e., quantos vizinhos possui o vértice i 
E[i,0] ... E[i,D[i]-1] = lista dos D[i] vizinhos do vértice i em ordem crescente

Após cada caso, há uma linha em branco.


Limites:

0 &lt; N &lt;= 250
1 &lt;= D[i] &lt; N </pre>
Formato da saída: <pre style="font-family: 'Helvetica Neue', Helvetica, sans-serif, Arial; overflow-x: auto; overflow-y: hidden; white-space: pre-wrap; word-wrap: break-word; padding: 0px; margin: 0px; font-size: 14px;">Para cada caso K = 0,...,C-1 da entrada, o programa deve imprimir uma linha na forma

K dmax Nmax

onde 

K = número do caso (de 0 a C-1)
dmax = maior distância mínima da origem S a qualquer outro vértice do grafo do caso T
Nmax = número de vértices do grafo cuja distância até S é dmax</pre>
