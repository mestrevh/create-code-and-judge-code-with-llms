Título: Rebu
Topicos do problema: algoritmo guloso; 
Tempo limite de execução: 3 segundo(s)
Descrição: <p style="color: rgb(36, 41, 46);">A Rebu é uma empresa que faz transporte de passageiros em carros autônomos que conectam <code style="background-color: rgba(27, 31, 35, 0.05);">N</code> pontos da região metropolitana através de <code style="background-color: rgba(27, 31, 35, 0.05);">W</code> vias pré-estabelecidas. Ao receber uma solicitação de um cliente para uma corrida de um ponto <code style="background-color: rgba(27, 31, 35, 0.05);">C</code> (localização atual do cliente) até um ponto <code style="background-color: rgba(27, 31, 35, 0.05);">D</code>, o veículo deve se deslocar da sua posição atual até o cliente (<code style="background-color: rgba(27, 31, 35, 0.05);">C</code>), e iniciar a corrida de <code style="background-color: rgba(27, 31, 35, 0.05);">C</code> até o destino <code style="background-color: rgba(27, 31, 35, 0.05);">D</code>, passando eventualmente por pontos intermédios ligados pelas vias pré-determinadas.</p><p style="color: rgb(36, 41, 46);">Os pontos atendidos pelo serviço estendem-se sobre <code style="background-color: rgba(27, 31, 35, 0.05);">M</code> cidades vizinhas, e cada cidade <code style="background-color: rgba(27, 31, 35, 0.05);">j=0..M-1</code> aplica sua própria tarifa <code style="background-color: rgba(27, 31, 35, 0.05);">R[j] $/Km</code>. Para cada trecho <code style="background-color: rgba(27, 31, 35, 0.05);">X--&gt;Y</code> do trajeto entre dois pontos consecutivos, o preço é calculado aplicando-se a tarifa da cidade do ponto de origem <code style="background-color: rgba(27, 31, 35, 0.05);">X</code> multiplicado pelo comprimento dessa via. A distância e o preço total da corrida são dados pelas somas dos comprimentos e dos preços dos trechos percorridos, respectivamente.</p><p style="color: rgb(36, 41, 46);">Para oferecer um serviço mais flexível, a Rebu propõe duas opções de corrida: a mais curta (<code style="background-color: rgba(27, 31, 35, 0.05);">S</code>) ou a mais econômica (<code style="background-color: rgba(27, 31, 35, 0.05);">E</code>), devendo o cliente indicar sua opção no momento da solicitação.</p><p style="color: rgb(36, 41, 46);">Um detalhe, entretanto, é que as tarifas são dinâmicas, podendo ser atualizadas a qualquer momento em função das condições de tráfego, demanda, etc. Entretanto, as tarifas aplicadas em cada corrida são aquelas vigentes no momento da solicitação, não podendo ser alteradas durante a corrida.</p>
Formato da entrada: <p style="color: rgb(36, 41, 46);">A primeira linha contém um inteiro</p><pre class=" language-text" style="color: black;direction: ltr;"><code class=" language-text" style="color: black;direction: ltr;">M&#10;</code></pre><p style="color: rgb(36, 41, 46);">correspondente ao número de cidades.</p><p style="color: rgb(36, 41, 46);">A próxima linha contém <code style="background-color: rgba(27, 31, 35, 0.05);">M</code> inteiros</p><pre class=" language-text" style="color: black;direction: ltr;"><code class=" language-text" style="color: black;direction: ltr;">R[0] ... R[M-1]&#10;</code></pre><p style="color: rgb(36, 41, 46);">com os valores iniciais das tarifas por Km em cada cidade.</p><p style="color: rgb(36, 41, 46);">A próxima linha contem um inteiro</p><pre class=" language-text" style="color: black;direction: ltr;"><code class=" language-text" style="color: black;direction: ltr;">N&#10;</code></pre><p style="color: rgb(36, 41, 46);">que corresponde ao número de pontos de embarque e desembarque.</p><p style="color: rgb(36, 41, 46);">Segue uma linha com <code style="background-color: rgba(27, 31, 35, 0.05);">N</code> inteiros</p><pre class=" language-text" style="color: black;direction: ltr;"><code class=" language-text" style="color: black;direction: ltr;">Q[0] ... Q[N-1]&#10;</code></pre><p style="color: rgb(36, 41, 46);">com <code style="background-color: rgba(27, 31, 35, 0.05);">Q[i]</code> indicando a cidade à qual pertence o ponto <code style="background-color: rgba(27, 31, 35, 0.05);">i</code>.</p><p style="color: rgb(36, 41, 46);">Segue-se uma linha com o inteiro</p><pre class=" language-text" style="color: black;direction: ltr;"><code class=" language-text" style="color: black;direction: ltr;">W&#10;</code></pre><p style="color: rgb(36, 41, 46);">correspondendo ao número de vias entre os pontos de embarque e desembarque.</p><p style="color: rgb(36, 41, 46);">Em seguida, temos <code style="background-color: rgba(27, 31, 35, 0.05);">W</code> linhas, cada uma especificando uma via <span>de sentido duplo</span> no formato</p><pre class=" language-text" style="color: black;direction: ltr;"><code class=" language-text" style="color: black;direction: ltr;">X Y Z&#10;</code></pre><p style="color: rgb(36, 41, 46);">onde <code style="background-color: rgba(27, 31, 35, 0.05);">X</code> é ponto de origem, <code style="background-color: rgba(27, 31, 35, 0.05);">Y</code> é o ponto de destino, e <code style="background-color: rgba(27, 31, 35, 0.05);">Z</code> é distância (comprimento da via) de <code style="background-color: rgba(27, 31, 35, 0.05);">X</code> a <code style="background-color: rgba(27, 31, 35, 0.05);">Y</code>.</p><p style="color: rgb(36, 41, 46);">Finalmente, temos várias linhas, sendo cada uma delas de um dos seguintes tipos:</p><pre class=" language-text" style="color: black;direction: ltr;"><code class=" language-text" style="color: black;direction: ltr;">RIDE C D O&#10;</code></pre><p style="color: rgb(36, 41, 46);">indica a solicitação de corrida do ponto <code style="background-color: rgba(27, 31, 35, 0.05);">C</code> (localização atual do cliente) para o ponto <code style="background-color: rgba(27, 31, 35, 0.05);">D</code> (destino desejado) com opção pelo tipo de corrida <code style="background-color: rgba(27, 31, 35, 0.05);">O</code>, sendo <code style="background-color: rgba(27, 31, 35, 0.05);">O</code> um caractere <code style="background-color: rgba(27, 31, 35, 0.05);">'S'</code> (corrida mais curta) ou <code style="background-color: rgba(27, 31, 35, 0.05);">'E'</code> (corrida mais econômica).</p><pre class=" language-text" style="color: black;direction: ltr;"><code class=" language-text" style="color: black;direction: ltr;">UPDA J R&#10;</code></pre><p style="color: rgb(36, 41, 46);">indica a atualização da tarifa da cidade <code style="background-color: rgba(27, 31, 35, 0.05);">J</code> para um novo valor <code style="background-color: rgba(27, 31, 35, 0.05);">R</code>.</p><h3 id="importante" style="color: rgb(36, 41, 46);"><a class="anchor" href="#importante" style="color: rgb(3, 102, 214);float: left;height: 1em;"><span class="octicon octicon-link" style="color: rgb(27, 31, 35);"></span></a>IMPORTANTE</h3><ul style="color: rgb(36, 41, 46);"><li>É sempre possível se deslocar entre quaisquer dois pontos de embarque/desembarque.</li><li>Caso o cliente tenha optado pela corrida mais curta e existam múltiplos caminhos de menor distância, escolher o de menor preço. Da mesma forma, caso o cliente tenha optado pela corrida mais econômica e existam mais de uma alternativa, escolher a de menor distância.</li></ul>
Formato da saída: <p style="color: rgb(36, 41, 46);">Para cada linha</p><pre class=" language-text" style="color: black;direction: ltr;"><code class=" language-text" style="color: black;direction: ltr;">RIDE C D O&#10;</code></pre><p style="color: rgb(36, 41, 46);">da entrada, o programa deve imprimir uma linha no formato</p><pre class=" language-text" style="color: black;direction: ltr;"><code class=" language-text" style="color: black;direction: ltr;">L P&#10;</code></pre><p style="color: rgb(36, 41, 46);">onde</p><ul style="color: rgb(36, 41, 46);"><li><p><code style="background-color: rgba(27, 31, 35, 0.05);">L</code> corresponde à distância total da corrida na opção escolhida pelo cliente</p></li><li><p><code style="background-color: rgba(27, 31, 35, 0.05);">P</code> corresponde ao preço total da corrida na opção escolhida pelo cliente</p></li></ul>
