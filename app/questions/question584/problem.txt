Título: Exercitando BSTs v2
Topicos do problema: Árvore; busca; 
Tempo limite de execução: 3 segundo(s)
Descrição: <p>A altura de um nó V de uma BST, H(V), é definida como:</p><p>H(V) = 0, se V é nulo<br/>H(V) = 1 + max(H(V.left), H(V.right)), se V é não-nulo</p><p>O objetivo deste exercício é implementar uma árvore de busca binária (BST), aumentada com a informação de altura dos nós, com as seguintes operações:</p><p>1) ADD k : insere a chave k na árvore caso ela não exista. Retorna a altura do nó inserido, ou do nó já existente com chave k.</p><p>2) DEL k : remove a chave k da árvore caso ela exista. Retorna a altura do nó removido, caso exista, ou 0 caso não exista na árvore.</p><p>3) QRY k : consulta se a árvore possui chave k. Retorna a altura do nó correspondente, caso exista, ou  0 caso não exista na árvore.</p><p>4) INT l r : retorna a menor e a maior chave da árvore no intervalo [l,r] (inclui as duas extremidades).</p><p>Neste exercício, antes de efetuarmos as operações acima, devemos iniciar uma BST, originalmente vazia, através da adição sucessiva de chaves numa sequência pseudo-aleatória. Uma sequência aleatória de N chaves entre 0 e M-1, X[0], X[1],..., X[N-1], é obtida através de um gerador congruente linear da seguinte maneira:</p><p>X[0] = seedX, onde 0 &lt; seedX &lt; M é um número dado chamado de &#34;semente&#34; da sequência<br/>X[i] = (A*X[i-1] + C) mod M, para 1 &lt;= i &lt; N, sendo A e C constantes dadas.</p><p><br/></p>
Formato da entrada: <p>A entrada é constituída por um único caso composto de várias linhas.<br/>A primeira linha contém 5 inteiros separados por espaços<br/><br/>N M seedX A C<br/><br/>sendo<br/><br/>N = quantidade de elementos inicialmente adicionados à BST<br/>M = limite superior do valor das chaves <br/>seed X = semente do gerador de chaves<br/>A, C = parâmetros do gerador discutidos acima.<br/><br/>Seguem-se várias linhas, cada uma com um comando correspondente a uma das operações discutidas acima,  com seus possíveis argumentos. <br/>As formas possíveis são:<br/><br/>ADD k<br/>DEL k<br/>QRY k<br/>INT l r<br/> <br/>Limites:<br/>1 &lt;= N &lt;= 2^20<br/>-2^19 &lt;= seedX, M, C &lt;= 2^19 <br/>-2^11 &lt;=  A  &lt;= 2^11<br/>A quantidade de comandos não será maior que 2^15<br/><br/>ATENÇÃO:<br/>Antes de qualquer operação, a BST deve ser iniciada como especificado acima.<br/></p>
Formato da saída: <p>Para cada comando na entrada, deve ser impressa uma linha na forma<br/><br/>S &lt;resultado da operação&gt;<br/><br/>onde<br/><br/>S = número sequencial da operação de 0, 1, 2, ...<br/><br/>Quanto ao resultado da operação, conforme descrito acima:<br/><br/>ADD k ---&gt; imprime a altura do nó inserido, ou do nó já existente com chave k<br/>DEL k ---&gt; imprime a altura do nó removido, caso exista, ou 0 caso não exista na árvore<br/>QRY k ---&gt; imprime a altura do nó correspondente, caso exista, ou 0 caso não exista na árvore.<br/>INT l r ---&gt; imprime a menor e a maior chave da árvore no intervalo [l,r] (inclui as duas extremidades), separadas por espaço. Caso não exista nenhuma chave no intervalo, não imprime nenhum valor<br/><br/>ATENÇÃO:<br/>As inserções feitas para iniciar a BST NÃO devem ter os seus retornos impressos e também não contam para o sequencial S, que só considera as operações após essa inicialização.<br/></p>
